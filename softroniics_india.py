# -*- coding: utf-8 -*-
"""Softroniics India.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-S8w94KcaU5MSA0eGmKJGgZmUkjoT666
"""

!pip install scikit-learn nltk

# Import libraries
import pandas as pd
import numpy as np
import nltk
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
file_path = "/content/spam_ham_dataset.csv"

df = pd.read_csv(file_path)

# Check for missing values
df.dropna(inplace=True)

df['label'] = df['label'].map({'ham': 0, 'spam': 1})

X_train, X_test, y_train, y_test = train_test_split(
    df['email_text'], df['label'], test_size=0.2, random_state=42, stratify=df['label']
)

vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)


y_pred = model.predict(X_test_tfidf)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))

def predict_email(email_text):
    email_tfidf = vectorizer.transform([email_text])
    prediction = model.predict(email_tfidf)[0]
    return 'Spam' if prediction == 1 else 'Ham'


sample_email = "Congratulations! You've won a free vacation. Click here to claim."
print(f'Prediction: {predict_email(sample_email)}')

# Google Colab Notebook for Spam Detection

# Install necessary libraries
!pip install scikit-learn nltk joblib streamlit

# Import libraries
import pandas as pd
import numpy as np
import nltk
import joblib
import streamlit as st
from sklearn.model_selection import train_test_split
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.naive_bayes import MultinomialNB
from sklearn.metrics import accuracy_score, classification_report

# Load dataset
file_path = "/content/spam_ham_dataset.csv"  # Upload the dataset to Colab

df = pd.read_csv(file_path)

# Check for missing values
df.dropna(inplace=True)

# Convert labels to binary format
df['label'] = df['label'].map({'ham': 0, 'spam': 1})

# Split data into training and test sets
X_train, X_test, y_train, y_test = train_test_split(
    df['email_text'], df['label'], test_size=0.2, random_state=42, stratify=df['label']
)

# Text vectorization using TF-IDF
vectorizer = TfidfVectorizer(stop_words='english', max_features=5000)
X_train_tfidf = vectorizer.fit_transform(X_train)
X_test_tfidf = vectorizer.transform(X_test)

# Train a Naive Bayes classifier
model = MultinomialNB()
model.fit(X_train_tfidf, y_train)

# Save the trained model and vectorizer
joblib.dump(model, "spam_ham_model.pkl")
joblib.dump(vectorizer, "tfidf_vectorizer.pkl")

# Predictions
y_pred = model.predict(X_test_tfidf)

# Evaluate the model
accuracy = accuracy_score(y_test, y_pred)
print(f'Accuracy: {accuracy:.2f}')
print(classification_report(y_test, y_pred))

# Function for predicting new email texts
def predict_email(email_text):
    email_tfidf = vectorizer.transform([email_text])
    prediction = model.predict(email_tfidf)[0]
    return 'Spam' if prediction == 1 else 'Ham'

# Streamlit Web App
st.title("Spam Email Detector")
email_text = st.text_area("Enter Email Text:")
if st.button("Check Spam"):
    if email_text:
        prediction = predict_email(email_text)
        st.success(f'This email is: {prediction}')
    else:
        st.warning("Please enter an email text.")

# Run with: `streamlit run script.py`

from google.colab import files

files.download("spam_ham_model.pkl")
files.download("tfidf_vectorizer.pkl")

# Google Colab Notebook for Spam Detection

# Install necessary libraries
!pip install scikit-learn nltk joblib streamlit

# Import libraries
import joblib
import streamlit as st

# Load the trained model and vectorizer
model = joblib.load("spam_ham_model.pkl")
vectorizer = joblib.load("tfidf_vectorizer.pkl")

# Function for predicting new email texts
def predict_email(email_text):
    email_tfidf = vectorizer.transform([email_text])
    prediction = model.predict(email_tfidf)[0]
    return 'Spam' if prediction == 1 else 'Ham'

# Streamlit Web App
st.title("Spam Email Detector")
email_text = st.text_area("Enter Email Text:")
if st.button("Check Spam"):
    if email_text:
        prediction = predict_email(email_text)
        st.success(f'This email is: {prediction}')
    else:
        st.warning("Please enter an email text.")

# Run with: `streamlit run script.py`

